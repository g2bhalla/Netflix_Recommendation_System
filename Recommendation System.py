# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Qv-lpVldpuSzWggHdmVt_HiMS8A9szQ
"""

pip install streamlit

pip install streamlit-lottie

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import plotly.graph_objects as go
# from streamlit_lottie import st_lottie
# import json
# 
# def load_lottiefile(filepath: str):
#     with open(filepath, "r") as f:
#         return json.load(f)
# 
# 
# from sklearn.feature_extraction.text import TfidfVectorizer
# 
# netflix_data = pd.read_csv('titles.csv')
# 
# 
# tfidf = TfidfVectorizer(stop_words='english')
# netflix_data['description'] = netflix_data['description'].fillna('')
# tfidf_matrix = tfidf.fit_transform(netflix_data['description'])
# 
# from sklearn.metrics.pairwise import linear_kernel
# cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
# 
# indices = pd.Series(netflix_data.index, index=netflix_data['title']).drop_duplicates()
# 
# def get_recommendations(title, cosine_sim=cosine_sim):
#     idx = indices[title]
#     sim_scores = list(enumerate(cosine_sim[idx]))
#     sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
#     sim_scores = sim_scores[1:11]
#     movie_indices = [i[0] for i in sim_scores]
#     return netflix_data.iloc[movie_indices]
# 
# #print(get_recommendations('Dark'))
# #tfidf_matrix.shape %%writefile app.py
# def Table(df):
#     fig=go.Figure(go.Table( columnorder = [1,2,3,4,5],
#           columnwidth = [15,35,10,10,10],
#             header=dict(values=[' Title','Description', 'Type', 'IMDB Rating', 'TMDB Rating'],
#                         line_color='white',font=dict(color='white',size= 19),height=40,
#                         fill_color='#Fd5a5a',#
#                         align=['left','center']),
#                 cells=dict(values=[df.title,df.description,df.type, df.imdb_score, df.tmdb_score],
#                        fill_color='#Ffc5c5',line_color='white',
#                            font=dict(color='black', family="Lato", size=16),
#                        align='left')))
#     fig.update_layout(height=1000,width = 500, title ={'text': "Recommendations for You", 'font': {'size': 22}},title_x=0.5
#                      )
#     return st.plotly_chart(fig,use_container_width=True)
# movie_list = netflix_data['title'].values
# 
# ####################################################################
# #streamlit
# ###################################################################
# st.header('Netflix Recommendation System ')
# lottie_coding = load_lottiefile("popcorn.json")
# st_lottie(
#     lottie_coding,
#     speed=1.5,
#     reverse=False,
#     loop=True,
#     quality="low",height=220
# )
# selected_movie = st.selectbox(
#     "Select a movie from the dropdown",
#     movie_list
# )
# if st.button('Show Recommendations'):
#     recommended_movie_names = get_recommendations(selected_movie)
#     Table(recommended_movie_names)
#     
# st.write('  '
#          )
# st.write(' ')
# 
# EDA = st.checkbox('Show Netflix Exploratory Data Analysis')
# if EDA :
#     st.write(
#         "Check out this [link](https://www.kaggle.com/code/rushikeshdane20/in-depth-analysis-of-netflix-with-plotly)")

!streamlit run app.py & npx localtunnel --port 8501